## 1. Generate Tag for Video Caption

<details>
<summary>Python</summary>

```python

class Solution:
    def generateTag(self, caption: str) -> str:
        res = "#"
        isCap = False
        i = 0

        # Skip leading spaces
        while i < len(caption) and caption[i] == ' ':
            i += 1

        while i < len(caption) and len(res) < 100:
            ch = caption[i]
            if 'a' <= ch <= 'z':
                if isCap:
                    res += ch.upper()
                    isCap = False
                else:
                    res += ch
            elif 'A' <= ch <= 'Z':
                if not isCap:
                    res += ch.lower()
                else:
                    res += ch
                    isCap = False
            elif ch == ' ':
                isCap = True
            i += 1

        return res

```

</details>

<details>
<summary>Cpp</summary>

```cpp
class Solution {
public:
    string generateTag(string caption) {
        string res = "#";
        bool isCap = false;
        int i;
        for(i=0; i<caption.size() && caption[i]==' '; ++i);
        for(; i<caption.size() && res.size()<100; ++i)
        {
            if(('a'<=caption[i] && caption[i]<='z'))
            {
                if(isCap)
                {
                    res.push_back(caption[i]-'a'+'A');
                    isCap = false;
                }
                else
                {
                    res.push_back(caption[i]);
                }
            }
            else if(('A'<=caption[i] && caption[i]<='Z'))
            {
                if(!isCap)
                {
                    res.push_back(caption[i]+'a'-'A');
                }
                else
                {
                    res.push_back(caption[i]);
                    isCap = false;
                }
            }
            else if(caption[i]==' ')
            {
                isCap = true;
            }
        }
        //cout << caption.size() << " " << res.size() << endl;
        return res;
    }
};
```

</details>

<details>
<summary>Java</summary>

```java
class Solution {
    public String generateTag(String caption) {
        StringBuilder res = new StringBuilder("#");
        boolean isCap = false;
        int i = 0;

        // Skip leading spaces
        while (i < caption.length() && caption.charAt(i) == ' ') {
            i++;
        }

        while (i < caption.length() && res.length() < 100) {
            char ch = caption.charAt(i);
            if (Character.isLowerCase(ch)) {
                if (isCap) {
                    res.append(Character.toUpperCase(ch));
                    isCap = false;
                } else {
                    res.append(ch);
                }
            } else if (Character.isUpperCase(ch)) {
                if (!isCap) {
                    res.append(Character.toLowerCase(ch));
                } else {
                    res.append(ch);
                    isCap = false;
                }
            } else if (ch == ' ') {
                isCap = true;
            }
            i++;
        }

        return res.toString();
    }
}

```

</details>

## 2. Count Special Triplets

<details>
<summary>Python</summary>

```python
from collections import defaultdict

class Solution:
    def specialTriplets(self, nums):
        n = len(nums)
        mod = 10**9 + 7
        res = 0
        freqPrev = defaultdict(int)
        freqNext = defaultdict(int)

        for num in nums:
            freqNext[num] += 1

        for j in range(n):
            freqNext[nums[j]] -= 1
            if j >= 1:
                i = freqPrev[2 * nums[j]]
                k = freqNext[2 * nums[j]]
                res = (res + (i * k) % mod) % mod
            freqPrev[nums[j]] += 1

        return res

```

</details>

<details>
<summary>Cpp</summary>

```cpp
class Solution {
public:
    int specialTriplets(vector<int>& nums) {
        int n = nums.size();
        int mod = 1000000007;
        long long res = 0;
        unordered_map<int, int> freqPrev;
        unordered_map<int, int> freqNext;

        for(int i=0; i<n; ++i)
        {
            freqNext[nums[i]]++;
        }
        for(int j=0; j<n; ++j)
        {
            freqNext[nums[j]]--;
            if(j>=1)
            {
                long long i = freqPrev[2*nums[j]];
                long long k = freqNext[2*nums[j]];
                res = (res + ((i*k)%mod)) % mod;
            }
            freqPrev[nums[j]]++;
        }
        return int(res);
    }
};

```

</details>

<details>
<summary>Java</summary>

```java
import java.util.*;

class Solution {
    public int specialTriplets(int[] nums) {
        int n = nums.length;
        int mod = 1_000_000_007;
        long res = 0;

        Map<Integer, Integer> freqPrev = new HashMap<>();
        Map<Integer, Integer> freqNext = new HashMap<>();

        for (int num : nums) {
            freqNext.put(num, freqNext.getOrDefault(num, 0) + 1);
        }

        for (int j = 0; j < n; ++j) {
            freqNext.put(nums[j], freqNext.get(nums[j]) - 1);

            if (j >= 1) {
                long i = freqPrev.getOrDefault(2 * nums[j], 0);
                long k = freqNext.getOrDefault(2 * nums[j], 0);
                res = (res + (i * k) % mod) % mod;
            }

            freqPrev.put(nums[j], freqPrev.getOrDefault(nums[j], 0) + 1);
        }

        return (int) res;
    }
}

```

</details>

## 3. Maximum Product of First and Last Elements of a Subsequence

<details>
<summary>Python</summary>

```python

class Solution:
    def maximumProduct(self, nums, m):
        from math import inf

        res = -float('inf')
        n = len(nums)
        max_prefix = [nums[0]]
        min_prefix = [nums[0]]

        for i in range(1, n):
            max_prefix.append(max(nums[i], max_prefix[i - 1]))
            min_prefix.append(min(nums[i], min_prefix[i - 1]))

        for i in range(m - 1, n):
            prod1 = nums[i] * max_prefix[i - m + 1]
            prod2 = nums[i] * min_prefix[i - m + 1]
            res = max(res, prod1, prod2)

        return res

```

</details>

<details>
<summary>Cpp</summary>

```cpp
 class Solution {
public:
    long long maximumProduct(vector<int>& nums, int m) {
        long long res = LLONG_MIN;
        vector<long long> max;
        vector<long long> min;
        max.push_back(nums[0]);
        min.push_back(nums[0]);
        for(int i=1; i<nums.size(); ++i)
        {
            if(nums[i]>max[i-1])
            {
                max.push_back(nums[i]);
            }
            else
            {
                max.push_back(max[i-1]);
            }
            if(nums[i]<min[i-1])
            {
                min.push_back(nums[i]);
            }
            else
            {
                min.push_back(min[i-1]);
            }
        }
        for(int i=m-1; i<nums.size(); ++i)
        {
            vector<long long> tmp = {res, nums[i]*max[i-m+1], nums[i]*min[i-m+1]};
            res = *max_element(tmp.begin(), tmp.end());
        }
        return res;
    }
};
```

</details>

<details>
<summary>Java</summary>

```java
import java.util.*;

class Solution {
    public long maximumProduct(int[] nums, int m) {
        int n = nums.length;
        long res = Long.MIN_VALUE;

        long[] maxPrefix = new long[n];
        long[] minPrefix = new long[n];

        maxPrefix[0] = nums[0];
        minPrefix[0] = nums[0];

        for (int i = 1; i < n; ++i) {
            maxPrefix[i] = Math.max(nums[i], maxPrefix[i - 1]);
            minPrefix[i] = Math.min(nums[i], minPrefix[i - 1]);
        }

        for (int i = m - 1; i < n; ++i) {
            long prod1 = nums[i] * maxPrefix[i - m + 1];
            long prod2 = nums[i] * minPrefix[i - m + 1];
            res = Math.max(res, Math.max(prod1, prod2));
        }

        return res;
    }
}

```

</details>

## 4. Find Weighted Median Node in Tree

<details>
<summary>Python</summary>

```python
import math
from collections import defaultdict

class Solution:
    def findMedian(self, n, edges, queries):
        self.num = n
        self.adj = [[] for _ in range(n)]
        for u, v, w in edges:
            self.adj[u].append((v, w))
            self.adj[v].append((u, w))

        self.timer = 0
        self.l = math.ceil(math.log2(n))
        self.tin = [0] * n
        self.tout = [0] * n
        self.up = [[0] * (self.l + 1) for _ in range(n)]
        self._dfs(0, 0)

        self.rootWeightDist = [0] * n
        self.rootDist = [0] * n
        def go(v, p, cur, d):
            self.rootWeightDist[v] = cur
            self.rootDist[v] = d
            for u, w in self.adj[v]:
                if u == p: continue
                go(u, v, cur + w, d + 1)
        go(0, -1, 0, 0)

        def pathSum(u, v, anc):
            return self.rootWeightDist[u] + self.rootWeightDist[v] - 2 * self.rootWeightDist[anc]

        res = []
        for u, v in queries:
            if u == v:
                res.append(u)
                continue
            anc = self._lca(u, v)
            total = pathSum(u, v, anc)
            median = (total + 1) // 2

            if pathSum(u, anc, anc) >= median:
                for i in range(self.l + 1):
                    uUp = self.up[u][i]
                    if pathSum(u, uUp, uUp) >= median:
                        if i == 0:
                            res.append(uUp)
                            break
                        u = self.up[u][i - 1]
                        break
            else:
                offset = pathSum(u, anc, anc)
                for i in range(self.l + 1):
                    vUp = self.up[v][i]
                    if pathSum(anc, vUp, anc) + offset < median:
                        if i == 0:
                            break
                        v = self.up[v][i - 1]
                        break
                res.append(v)
        return res

    def _dfs(self, v, p):
        self.tin[v] = self.timer = self.timer + 1
        self.up[v][0] = p
        for i in range(1, self.l + 1):
            self.up[v][i] = self.up[self.up[v][i - 1]][i - 1]
        for u, _ in self.adj[v]:
            if u != p:
                self._dfs(u, v)
        self.tout[v] = self.timer = self.timer + 1

    def _is_ancestor(self, u, v):
        return self.tin[u] <= self.tin[v] and self.tout[u] >= self.tout[v]

    def _lca(self, u, v):
        if self._is_ancestor(u, v):
            return u
        if self._is_ancestor(v, u):
            return v
        for i in reversed(range(self.l + 1)):
            if not self._is_ancestor(self.up[u][i], v):
                u = self.up[u][i]
        return self.up[u][0]


```

</details>

<details>
<summary>Cpp</summary>

```cpp
class Solution {
private:
    int num, l;
    vector<vector<array<int, 2>>> adj;

    int timer;
    vector<int> tin, tout;
    vector<vector<int>> up;

    void dfs(int v, int p)
    {
        tin[v] = ++timer;
        up[v][0] = p;
        for (int i = 1; i <= l; ++i)
            up[v][i] = up[up[v][i-1]][i-1];

        for (auto& [u, w] : adj[v]) {
            if (u != p)
                dfs(u, v);
        }

        tout[v] = ++timer;
    }

    bool is_ancestor(int u, int v)
    {
        return tin[u] <= tin[v] && tout[u] >= tout[v];
    }

    int lca(int u, int v)
    {
        if (is_ancestor(u, v))
            return u;
        if (is_ancestor(v, u))
            return v;
        for (int i = l; i >= 0; --i) {
            if (!is_ancestor(up[u][i], v))
                u = up[u][i];
        }
        return up[u][0];
    }

    void preprocess(int root) {
        tin.resize(num);
        tout.resize(num);
        timer = 0;
        l = ceil(log2(num));
        up.assign(num, vector<int>(l + 1));
        dfs(root, root);
    }
public:
    vector<int> findMedian(int n, vector<vector<int>>& edges, vector<vector<int>>& queries) {
        num = n;
        adj.clear();
        adj.resize(num);
        for(auto& edge : edges) {
            adj[edge[0]].push_back({edge[1], edge[2]});
            adj[edge[1]].push_back({edge[0], edge[2]});
        }
        preprocess(0);
        vector<long long> rootWeightDist(num), rootDist(num);
        [&](this auto&& go, int v, int p, long long cur, int d) -> void {
            rootWeightDist[v] = cur, rootDist[v] = d;
            for(auto& [ce, w] : adj[v]) {
                if(ce == p) continue;
                go(ce, v, cur + w, d + 1);
            }
        }(0, -1, 0, 0);

        auto pathSum = [&](int u, int v, int ancestor) -> long long {
            return rootWeightDist[u] + rootWeightDist[v] - 2 * rootWeightDist[ancestor];
        };

        int qSz = queries.size();
        vector<int> res(qSz);
        for(int i = 0; i < qSz; i++) {
            int u = queries[i][0], v = queries[i][1];
            int orU = u, orV = v;

            if(u == v) {
                res[i] = u;
                continue;
            }
            int ancestor = lca(u, v);
            long long median = (pathSum(u, v, ancestor) + 1) / 2;
            if(pathSum(u, ancestor, ancestor) >= median) {
                for(int p = 0;; p++) {
                    int uUp = up[u][p];
                    if(pathSum(orU, uUp, uUp) >= median) {
                        if(p == 0) {
                            res[i] = uUp;
                            break;
                        }else {
                            u = up[u][p - 1];
                            p = -1;
                        }
                    }
                }
            }else {
                long long offset = pathSum(u, ancestor, ancestor);
                for(int p = 0;; p++) {
                    int vUp = up[v][p];
                    if(pathSum(ancestor, vUp, ancestor) + offset < median) {
                        if(p == 0) {
                            break;
                        }else {
                            v = up[v][p - 1];
                            p = -1;
                        }
                    }
                }
                res[i] = v;
            }
        }
        return res;
    }
};

```

</details>

<details>
<summary>Java</summary>

```java
import java.util.*;

class Solution {
    int num, l, timer;
    List<List<int[]>> adj;
    int[] tin, tout;
    int[][] up;
    long[] rootWeightDist;

    public List<Integer> findMedian(int n, List<List<Integer>> edges, List<List<Integer>> queries) {
        num = n;
        adj = new ArrayList<>();
        for (int i = 0; i < n; ++i) adj.add(new ArrayList<>());
        for (List<Integer> edge : edges) {
            adj.get(edge.get(0)).add(new int[]{edge.get(1), edge.get(2)});
            adj.get(edge.get(1)).add(new int[]{edge.get(0), edge.get(2)});
        }

        tin = new int[n];
        tout = new int[n];
        timer = 0;
        l = (int) Math.ceil(Math.log(n) / Math.log(2));
        up = new int[n][l + 1];
        dfs(0, 0);

        rootWeightDist = new long[n];
        dfsWeight(0, -1, 0);

        List<Integer> res = new ArrayList<>();
        for (List<Integer> q : queries) {
            int u = q.get(0), v = q.get(1), origU = u, origV = v;
            if (u == v) {
                res.add(u);
                continue;
            }

            int ancestor = lca(u, v);
            long path = pathSum(u, v, ancestor);
            long median = (path + 1) / 2;

            if (pathSum(u, ancestor, ancestor) >= median) {
                while (true) {
                    for (int i = 0; i <= l; i++) {
                        int uUp = up[u][i];
                        if (pathSum(origU, uUp, uUp) >= median) {
                            if (i == 0) {
                                res.add(uUp);
                                break;
                            } else {
                                u = up[u][i - 1];
                                break;
                            }
                        }
                    }
                    break;
                }
            } else {
                long offset = pathSum(u, ancestor, ancestor);
                while (true) {
                    for (int i = 0; i <= l; i++) {
                        int vUp = up[v][i];
                        if (pathSum(ancestor, vUp, ancestor) + offset < median) {
                            if (i == 0) break;
                            else {
                                v = up[v][i - 1];
                                break;
                            }
                        }
                    }
                    res.add(v);
                    break;
                }
            }
        }
        return res;
    }

    void dfs(int v, int p) {
        tin[v] = ++timer;
        up[v][0] = p;
        for (int i = 1; i <= l; ++i)
            up[v][i] = up[up[v][i - 1]][i - 1];
        for (int[] edge : adj.get(v)) {
            int u = edge[0];
            if (u != p) dfs(u, v);
        }
        tout[v] = ++timer;
    }

    void dfsWeight(int v, int p, long curWeight) {
        rootWeightDist[v] = curWeight;
        for (int[] edge : adj.get(v)) {
            int u = edge[0], w = edge[1];
            if (u != p) dfsWeight(u, v, curWeight + w);
        }
    }

    boolean isAncestor(int u, int v) {
        return tin[u] <= tin[v] && tout[u] >= tout[v];
    }

    int lca(int u, int v) {
        if (isAncestor(u, v)) return u;
        if (isAncestor(v, u)) return v;
        for (int i = l; i >= 0; --i) {
            if (!isAncestor(up[u][i], v))
                u = up[u][i];
        }
        return up[u][0];
    }

    long pathSum(int u, int v, int anc) {
        return rootWeightDist[u] + rootWeightDist[v] - 2 * rootWeightDist[anc];
    }
}

```

</details>
